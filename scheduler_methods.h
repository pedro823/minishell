/*
    Auxiliar functions for schedulers
    Created by:
    Pedro Pereira                   9778794
    Raphael Gusm√£o                  9778561
 */

#ifndef __SCHEDULER_METHODS_H__
#define __SCHEDULER_METHODS_H__
#include "process_queue.h"

/**
 * Auxiliar structures
 */
struct simulator_return {
    int process_number;
    clock_t time_ended;
};

struct scheduler_return {
    int amount_completed_in_deadline;
    float wait_time;
    float deadline_trespass;
    long long amount_context_change;
    long double total_time_scheduler;
};

/**
 * returns the minimum of two floats
 */
float minf(float a, float b);

/**
 * Returns priority of the process
 */
int get_priority(struct process proc);

/**
 * Merge-sorts a job queue
 * if mode is 0: Sorts by init_time
 * if mode is 1: Sorts by dt, INVERTED SORT.
 * if mode is 2: Sorts by priority
 */
void sort_queue(struct process *job_list, int start, int end, char mode);

/**
 * Pretty prints statistics generated by schedulers
 */
void print_statistics(struct scheduler_return *statistics, int array_size);

/**
 * transforms a double linked list into a vector, storing
 * the array size into *size
 * DESTROYS ORIGINAL LINKED LIST.
 */
struct process *to_array(deque **list, int *size);

/**
 * transforms an array of processes into a double linked list
 * needs to know the size.
 * DESTROYS ORIGINAL ARRAY.
 */
deque *to_linked_list(struct process *array, int size);


#endif
